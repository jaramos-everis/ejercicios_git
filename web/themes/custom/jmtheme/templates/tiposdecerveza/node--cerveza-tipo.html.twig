{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}


{#

Con {{ url }} podemos accededer directamente a la url del nodo y obtener su valor.
Tambien podríamos utilizar la siguiente linea,
 {{ path('entity.node.canonical', {'node': node.id}) }}

#}



<article{{ attributes }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <footer>
      {{ author_picture }}
      <div{{ author_attributes }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %}
  {# 
  Recorremos con un bucle los distintos campos pero excluimos los indicados en without, para saber los nombre 
  de los campos realizamos antes un {{ dd(content) }} que con {{ content }} sin más podríamos imprimir todos los 
  campos sin problema alguno.
  Si queremos acceder a algún campo en concreto desde aquí utilizamos la siguiente nomemclatura. 
   {{ content.field_texto_cerveza['0']['#text'] }}
   Tambien vale directamente 
   {{ content.field_imagen_cerveza }}
  #}

  {#
  An image field stores the file id in target_id. You can access the file id with:
    {{ node.field_main_image.target_id }}
  There is a second property in the image field. It is for the referenced entity, 
  in this case the file object. This is not visible in the debug output, because it is computed:
    {{ node.field_main_image.entity }}
  In the file object you find the field uri
    {{ node.field_main_image.entity.uri.value }}
  which you can use the get the url of the original image
    {{ file_url(node.field_main_image.entity.uri.value) }}
  or the url of an image style
    {{ node.field_main_image.entity.uri.value | image_style('thumbnail') }}
  #}

  <div{{ content_attributes }}>
  {# 
  Incluimos la url de la imagen que vamos a colocar en background en una variable, luego la añadimos
  en el stylo a un div.
   #}
  {% set background_image = file_url(node.field_imagen_cerveza.entity.uri.value) %}
  
  <div style="background-image: url('{{ background_image }}'); background-repeat: no-repeat; background-position: center" class = "cerveza__background">
  {{ content.field_texto_cerveza }}
  
  </div>

  {% for field in content|without('field_imagen_cerveza','field_texto_cerveza') %}
    {{ field }}
  {% endfor %}

  </div>
</article>
