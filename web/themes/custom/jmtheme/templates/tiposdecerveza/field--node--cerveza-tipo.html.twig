{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 *
 * @see template_preprocess_field()
 */
#}

{#
Con dd(items) podemos acceder a los items para ver que elementos tenemos. 

Si es un bloque para acceder a los valores accememos con la siguiente linea.
{{ item.content['#block_content'].field_clase.value }}

Siendo field.clase el nombre máquina del campo y value la propiedad del objeto de tipo bloque.
Podríamos usar cualquier nombre de propiedad, por ejemplo .field

Con el id podemos acceder directamente a la variable, ya que no hay nombre de máquina, siendo 
elements el tipo a cambiar, aquí sería item 
{{ elements.content['#block_content'].id() }}
#}



{%
  set classes = [
    'field',
    'field--name-' ~ field_name|clean_class,
    'field--type-' ~ field_type|clean_class,
    'field--label-' ~ label_display,
    label_display == 'inline' ? 'clearfix',
  ]
%}
{%
  set title_classes = [
    'field__label',
    label_display == 'visually_hidden' ? 'visually-hidden',
  ]
%}



{% if label_hidden %}
  {% if multiple %}
    <div{{ attributes.addClass(classes, 'field__items') }}>
      {% for item in items %}

        <div{{ item.attributes.addClass('field__item') }}>{{ item.content }}</div>
      {% endfor %}
    </div>
  {% else %}

    {% for item in items %}

    {# Utilizando filtros de twig, Eliminamos los espacios y los guiones sustituyendolos por nada, así los eliminamos. 
    Así añadimos a cada field un clase personalizada con el nombre del bloque, si es un bloque.
    #}
    {% set cata_class =  (item.content['#block_content'].info.value)|trim|lower|replace({'-': "", ' ': ""})  %}   
    
      <div{{ attributes.addClass(classes, 'field__item', cata_class) }}>{{ item.content }}</div>
    {% endfor %}

  {% endif %}
{% else %}
  <div{{ attributes.addClass(classes) }}>
    <div{{ title_attributes.addClass(title_classes) }}>{{ label }}</div>
    {% if multiple %}
      <div class="field__items">
    {% endif %}
    {% for item in items %}
      <div{{ item.attributes.addClass('field__item') }}>{{ item.content }}</div>
    {% endfor %}
    {% if multiple %}
      </div>
    {% endif %}
  </div>
{% endif %}
